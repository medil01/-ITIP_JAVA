import java.util.LinkedList;

public class HashTable<K, V> {
private LinkedList<Entry<K, V>>[] table;
private int size;

Plain Text
Copy code
public HashTable(int capacity) {
    table = new LinkedList[capacity];
    size = 0;
}

public void put(K key, V value) {
    int index = hash(key);
    if (table[index] == null) {
        table[index] = new LinkedList<>();
    }
    for (Entry<K, V> entry : table[index]) {
        if (entry.getKey().equals(key)) {
            entry.setValue(value);
            return;
        }
    }
    table[index].add(new Entry<>(key, value));
    size++;
}

public V get(K key) {
    int index = hash(key);
    LinkedList<Entry<K, V>> list = table[index];
    if (list == null) {
        return null;
    }
    for (Entry<K, V> entry : list) {
        if (entry.getKey().equals(key)) {
            return entry.getValue();
        }
    }
    return null;
}

public void remove(K key) {
    int index = hash(key);
    LinkedList<Entry<K, V>> list = table[index];
    if (list != null) {
        for (Entry<K, V> entry : list) {
            if (entry.getKey().equals(key)) {
                list.remove(entry);
                size--;
                return;
            }
        }
    }
}

public int size() {
    return size;
}

public boolean isEmpty() {
    return size == 0;
}

private int hash(K key) {
    return key.hashCode() % table.length;
}

private static class Entry<K, V> {
    private K key;
    private V value;
