import java.util.*;

public class Task4 {

    // Задание 1: Удаление повторяющихся символов в строке
    public static String nonRepeatable(String str) {
        Set<Character> set = new LinkedHashSet<>();
        for (char c : str.toCharArray()) {
            set.add(c);
        }
        StringBuilder sb = new StringBuilder();
        for (char c : set) {
            sb.append(c);
        }
        return sb.toString();
    }

    // Задание 2: Генерация всех возможных комбинаций скобок
    public static List<String> generateBrackets(int n) {
        List<String> result = new ArrayList<>();
        backtrack(result, "", 0, 0, n);
        return result;
    }

    private static void backtrack(List<String> result, String current, int open, int close, int max) {
        if (current.length() == max * 2) {
            result.add(current);
            return;
        }

        if (open < max) {
            backtrack(result, current + "(", open + 1, close, max);
        }
        if (close < open) {
            backtrack(result, current + ")", open, close + 1, max);
        }
    }

    // Задание 3: Генерация бинарных комбинаций без соседствующих нулей
    public static List<String> binarySystem(int n) {
        List<String> result = new ArrayList<>();
        backtrackBinary(result, "", n);
        return result;
    }

    private static void backtrackBinary(List<String> result, String current, int n) {
        if (current.length() == n) {
            result.add(current);
            return;
        }

        backtrackBinary(result, current + "1", n);
        if (current.isEmpty() || current.charAt(current.length() - 1) != '0') {
            backtrackBinary(result, current + "0", n);
        }
    }

    // Задание 4: Нахождение самой длинной последовательности
    public static String alphabeticRow(String str) {
        String longestRow = "";
        StringBuilder currentRow = new StringBuilder();
        for (int i = 0; i < str.length() - 1; i++) {
            currentRow.append(str.charAt(i));
            if (str.charAt(i + 1) - str.charAt(i) != 1) {
                if (currentRow.length() > longestRow.length()) {
                    longestRow = currentRow.toString();
                }
                currentRow = new StringBuilder();
            }
        }
        currentRow.append(str.charAt(str.length() - 1));
        if (currentRow.length() > longestRow.length()) {
            longestRow = currentRow.toString();
        }
        return longestRow;
    }

    // Задание 5: Замена повторяющихся символов числом
    public static String replaceCharsWithCount(String str) {
        StringBuilder result = new StringBuilder();
        int count = 1;
        for (int i = 0; i < str.length() - 1; i++) {
            if (str.charAt(i) == str.charAt(i + 1)) {
                count++;
            } else {
                result.append(str.charAt(i)).append(count);
                count = 1;
            }
        }
        result.append(str.charAt(str.length() - 1)).append(count);
        return result.toString();
    }

    // Задание 6: Преобразование числа в строку
    public static int convertToNum(String str) {
        Map<String, Integer> numbers = new HashMap<>();
        numbers.put("zero", 0);
        numbers.put("one", 1);
        numbers.put("two", 2);
        numbers.put("three", 3);
        numbers.put("four", 4);
        numbers.put("five", 5);
        numbers.put("six", 6);
        numbers.put("seven", 7);
        numbers.put("eight", 8);
        numbers.put("nine", 9);
        numbers.put("ten", 10);
        numbers.put("eleven", 11);
        numbers.put("twelve", 12);
        numbers.put("thirteen", 13);
        numbers.put("fourteen", 14);
        numbers.put("fifteen", 15);
        numbers.put("sixteen", 16);
        numbers.put("seventeen", 17);
        numbers.put("eighteen", 18);
        numbers.put("nineteen", 19);
        numbers.put("twenty", 20);
        numbers.put("thirty", 30);
        numbers.put("forty", 40);
        numbers.put("fifty", 50);
        numbers.put("sixty", 60);
        numbers.put("seventy", 70);
        numbers.put("eighty", 80);
        numbers.put("ninety", 90);
        numbers.put("hundred", 100);

        String[] words = str.split(" ");
        int result = 0;
        int currentNumber = 0;
        for (String word : words) {
            if (numbers.containsKey(word)) {
                currentNumber += numbers.get(word);
                if (currentNumber >= 100) {
                    currentNumber *= numbers.get(word);
                    currentNumber -= 100;
                    result += currentNumber;
                    currentNumber = 0;
                }
            }
        }
        result += currentNumber;
        return result;
    }

    // Задание 7: Поиск подстроки максимальной длины с уникальными элементами
    public static String uniqueSubstring(String str) {
        Set<Character> set = new LinkedHashSet<>();
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (set.contains(c)) {
                break;
            }
            set.add(c);
            result.append(c);
        }
        return result.toString();
    }


    // Задание 8: Поиск кратчайшего пути в матрице
    public static int shortestWay(int[][] matrix) {
        int n = matrix.length;
        int[][] dp = new int[n][n];
        dp[0][0] = matrix[0][0];

        for (int i = 1; i < n; i++) {
            dp[i][0] = dp[i - 1][0] + matrix[i][0];
            dp[0][i] = dp[0][i - 1] + matrix[0][i];
        }

        for (int i = 1; i < n; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j];
            }
        }

        return dp[n - 1][n - 1];
    }

    // Задание 9: Построение строки на основе числового порядка слов
    public static String numericOrder(String str) {
        String[] words = str.split(" ");
        String[] result = new String[words.length];
        for (String word : words) {
            int index = Integer.parseInt(word.replaceAll("[^\\d]", "")) - 1;
            result[index] = word.replaceAll("\\d", "");
        }
        return String.join(" ", result);
    }

    // Задание 10: Замена элементов второго числа элементами первого числа
    public static int switchNums(int num1, int num2) {
        int[] count1 = countDigits(num1);
        int[] count2 = countDigits(num2);
        int[] sortedDigits = new int[10];
        int resultNumIndex = 0;

        int resultNum = 0;
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < count1[i]; j++) {
                sortedDigits[resultNumIndex] = i;
                resultNumIndex++;
                resultNum = resultNum * 10 + i;
            }
        }

        int switchCount = 0;
        int multiplier = 1;
        for (int i = 0; i < 10; i++) {
            int digit = sortedDigits[i];
            while (count2[digit] > 0) {
                count2[digit]--;
                switchCount++;
                resultNum += digit * multiplier;
                multiplier *= 10;
            }
        }

        return switchCount == 0 ? -1 : resultNum;
    }

    private static int[] countDigits(int num) {
        int[] count = new int[10];
        while (num > 0) {
            int digit = num % 10;
            count[digit]++;
            num /= 10;
        }
        return count;
    }

    public static void main(String[] args) {
        // Проверка заданий

        // Задание 1
        System.out.println(nonRepeatable("abracadabra")); // " abrcd"
        System.out.println(nonRepeatable("paparazzi")); // " parzi"
        System.out.println();

        // Задание 2
        System.out.println(generateBrackets(1)); // ["()"]
        System.out.println(generateBrackets(2)); // ["(())", "()()"]
        System.out.println(generateBrackets(3)); // ["((()))", "(()())", "(())()", "()(())", "()()()"]
        System.out.println();

        // Задание 3
        System.out.println(binarySystem(3)); // ["010", "011", "101", "110", "111"]
        System.out.println(binarySystem(4)); // ["0101", "0110", "0111", "1010", "1011", "1101", "1110", "1111"]
        System.out.println();

        // Задание 4
        System.out.println(alphabeticRow("abcdjuwx")); // "abcd"
        System.out.println(alphabeticRow("klmabzyxw")); // "zyxw"
        System.out.println();

        // Задание 5
        System.out.println(replaceCharsWithCount("aaabbcdd")); // "c1b2d2a3"
        System.out.println(replaceCharsWithCount("vvvvaajaaaaa")); // "j1a2v4a5"
        System.out.println();

        // Задание 6
        System.out.println(convertToNum("eight")); // 8
        System.out.println(convertToNum("five hundred sixty seven")); // 567
        System.out.println(convertToNum("thirty one")); // 31
        System.out.println();

        // Задание 7
        System.out.println(uniqueSubstring("123412324")); // "1234"
        System.out.println(uniqueSubstring("111111")); // "1"
        System.out.println(uniqueSubstring("77897898")); // "789"
        System.out.println();

        // Задание 8
        int[][] matrix1 = {
                {1, 3, 1},
                {1, 5, 1},
                {4, 2, 1}
        };
        System.out.println(shortestWay(matrix1)); // 7

        int[][] matrix2 = {
                {2, 7, 3},
                {1, 4, 8},
                {4, 5, 9}
        };
        System.out.println(shortestWay(matrix2)); // 21
        System.out.println();

        // Задание 9
        System.out.println(numericOrder("t3o the5m 1One all6 r4ule ri2ng")); // " One ring to rule them all"
        System.out.println(numericOrder("re6sponsibility Wit1h gr5eat power3 4comes g2reat")); // " With great power comes great responsibility"
        System.out.println();

        // Задание 10
        System.out.println(switchNums(519, 723)); // 953
        System.out.println(switchNums(491, 3912)); // 9942
        System.out.println(switchNums(6274, 71259)); // 77659
    }
}
