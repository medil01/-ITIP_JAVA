 import java.util.*;

public class Task4 {

    // Задание 1: Удаление повторяющихся символов в строке
    public static String nonRepeatable(String str) {
        Set<Character> set = new LinkedHashSet<>();// объект множества "set" хранит только уникальные символы, сохраняя порядок их добавления.
        for (char c : str.toCharArray()) {// итерация по каждому символу строки "str" с помощью цикла "for-each".
            set.add(c);//Внутри цикла каждый символ добавляется в множество "set"
        }
        StringBuilder sb = new StringBuilder();//для построения новой строки без повторений.
        for (char c : set) {//итерация по символам множества "set".
            sb.append(c);//Каждый символ добавляется в объект StringBuilder "sb" с помощью метода "append
        }
        return sb.toString();//метод возвращает строковое представление объекта StringBuilder с помощью метода "toString"
    }

    // Задание 2: Генерация всех возможных комбинаций скобок
    public static List<String> generateBrackets(int n) {
        List<String> result = new ArrayList<>();
        backtrack(result, "", 0, 0, n);//Функция backtrack - это вспомогательная рекурсивная функция, которая строит комбинации скобок
        return result;
    }

    private static void backtrack(List<String> result, String current, int open, int close, int max) {
        if (current.length() == max * 2) {//Первое условие в функции backtrack проверяет длину текущей комбинации скобок.
            result.add(current);//Если она равна удвоенному значению max то текущая комбинация добавляется в список result
            return;
        }

        if (open < max) {//с помощью двух условий if, функция рекурсивно вызывает саму себя, добавляя открывающую скобку "(" или закрывающую скобку ")"
            backtrack(result, current + "(", open + 1, close, max);
        }
        if (close < open) {//Условия if ограничивают количество открывающих и закрывающих скобок в комбинации до значения max.
            backtrack(result, current + ")", open, close + 1, max);
        }//Рекурсия продолжается, пока не будут перебраны все возможные комбинации скобок.
    }//в списке result будут содержаться все возможные комбинации скобок заданного количества

    // Задание 3: Генерация бинарных комбинаций без соседствующих нулей
    public static List<String> binarySystem(int n) {//В функции binarySystem создается пустой список result, который будет содержать все сгенерированные комбинации.
        List<String> result = new ArrayList<>();
        backtrackBinary(result, "", n);//вспомогательная функция backtrackBinary=рекурсивно генерирует комбинации.
        return result;
    }

    private static void backtrackBinary(List<String> result, String current, int n) {// проверяется, достигнута ли нужная длина комбинации. Если достигнута, то эта комбинация добавляется в список result.
        if (current.length() == n) {
            result.add(current);
            return;
        }

        backtrackBinary(result, current + "1", n);
        if (current.isEmpty() || current.charAt(current.length() - 1) != '0') {
            backtrackBinary(result, current + "0", n);
        }//Если длина комбинации не достигнута, то происходит два вызова функции backtrackBinary: один с добавлением символа "1" к текущей комбинации, и второй с добавлением символа "0" к текущей комбинации.
    }

    // Задание 4: Нахождение самой длинной последовательности
    public static String alphabeticRow(String str) {
        String longestRow = "";//самая длинная последовательность)
        StringBuilder currentRow = new StringBuilder();//текущая последовательность
        for (int i = 0; i < str.length() - 1; i++) {// цикл for в строке str, кроме последнего символа
            currentRow.append(str.charAt(i));//В каждой итерации цикла символ добавляется к currentRow с помощью оператора +=.
            if (str.charAt(i + 1) - str.charAt(i) != 1) {// является ли следующий символ алфавитным после текущего символа .разница между кодами символов не равна 1= последовательность прервалась.
                if (currentRow.length() > longestRow.length()) {
                    longestRow = currentRow.toString();
                }
                currentRow = new StringBuilder();// сбрасывается в пустую строку
            }
        }
        currentRow.append(str.charAt(str.length() - 1));// последний символ в строке str добавляется к currentRow
        if (currentRow.length() > longestRow.length()) {// проверяется, является ли currentRow самой длинной последовательностью.
            longestRow = currentRow.toString();
        }
        return longestRow;//Возвращается значение longestRow - самая длинная последовательность символов, идущих по алфавиту, в строке str.
    }

    // Задание 5: Замена повторяющихся символов числом
    public static String replaceCharsWithCount(String str) {
        StringBuilder result = new StringBuilder();
        int count = 1;
        for (int i = 0; i < str.length() - 1; i++) {//В for итерируется по каждому символу входной строки, кроме последнего символа
            if (str.charAt(i) == str.charAt(i + 1)) {//  равен ли текущий символ i следующему символу i + 1
                count++;// Если они равны, то увеличивается счетчик count
            } else {//Если символы не равны
                result.append(str.charAt(i)).append(count);//текущий символ str.charAt(i) и соответствующее количество повторений count добавляются в result
                count = 1;//count сбрасывается обратно в 1
            }
        }
        result.append(str.charAt(str.length() - 1)).append(count);// последний символ строки и количество повторений count  добавляется в result
        return result.toString();//результирующая строка, созданная с помощью StringBuilder, преобразуется в обычную строку с помощью метода toString() и возвращается как результат функции.
    }

    // Задание 6: Преобразование числа в строку
    public static int convertToNum(String str) {
        Map<String, Integer> numbers = new HashMap<>();//Создание Map объекта с ключами типа String и значениями типа Integer, чтобы хранить соответствия числительных и числовых значений.
        numbers.put("zero", 0);//Добавление в Map соответствия числительного "zero" и значения 0.
        numbers.put("one", 1);//Аналогично добавляются соответствия для других числительных от "one" до "hundred" и их числовых значений.
        numbers.put("two", 2);
        numbers.put("three", 3);
        numbers.put("four", 4);
        numbers.put("five", 5);
        numbers.put("six", 6);
        numbers.put("seven", 7);
        numbers.put("eight", 8);
        numbers.put("nine", 9);
        numbers.put("ten", 10);
        numbers.put("eleven", 11);
        numbers.put("twelve", 12);
        numbers.put("thirteen", 13);
        numbers.put("fourteen", 14);
        numbers.put("fifteen", 15);
        numbers.put("sixteen", 16);
        numbers.put("seventeen", 17);
        numbers.put("eighteen", 18);
        numbers.put("nineteen", 19);
        numbers.put("twenty", 20);
        numbers.put("thirty", 30);
        numbers.put("forty", 40);
        numbers.put("fifty", 50);
        numbers.put("sixty", 60);
        numbers.put("seventy", 70);
        numbers.put("eighty", 80);
        numbers.put("ninety", 90);
        numbers.put("hundred", 100);

        String[] words = str.split(" ");//Разделение строки str на слова по пробелам и сохранение в массиве words.
        int result = 0;// result используется для накопления итогового числового значения.
        int currentNumber = 0;//currentNumber будет использоваться для временного хранения текущего числового значения.
        for (String word : words) {// обработка каждого слова из массива words.
            if (numbers.containsKey(word)) {//Проверка, содержит ли Map числительное word в качестве ключа.
                currentNumber += numbers.get(word);//Получение числового значения, соответствующего числительному word из Map и добавление его к currentNumber.
                if (currentNumber >= 100) {// Проверка, превышает ли currentNumber значение 100.
                    currentNumber *= numbers.get(word);//Умножение currentNumber на числовое значение word.
                    currentNumber -= 100;// Вычитание 100 из currentNumber
                    result += currentNumber;//Добавление currentNumber к result
                    currentNumber = 0;//Сброс currentNumber до значения 0
                }
            }
        }
        result += currentNumber;//Добавление текущего значения currentNumber к result.
        return result;//- Возврат итогового результата
    }

    // Задание 7: Поиск подстроки максимальной длины с уникальными элементами
    public static String uniqueSubstring(String str) {
        Set<Character> set = new LinkedHashSet<>();//Создание объекта set типа Set<Character> для хранения уникальных символов. LinkedHashSet гарантирует сохранение порядка элементов вставки.
        StringBuilder result = new StringBuilder();//Создание пустой строки result, которая будет содержать найденную подстроку.
        for (int i = 0; i < str.length(); i++) {//Начало цикла, который перебирает символы в строке str по индексу
            char c = str.charAt(i);//Получение символа на позиции i в строке str
            if (set.contains(c)) {//Проверка, содержит ли set символ c
                break;//Прерывание цикла, если символ c уже присутствует в set
            }
            set.add(c);//Добавление символа c в set, так как он является уникальным
            result.append(c);//Добавление символа c в result для построения найденной подстроки
        }
        return result.toString();//Возврат найденной подстроки
    }


    // Задание 8: Поиск кратчайшего пути в матрице
    public static int shortestWay(int[][] matrix) {// принимает двумерный массив (matrix) в качестве параметра и возвращает значение int.
        int n = matrix.length;//  переменная n инициализируется (количеством строк) матрицы
        int[][] dp = new int[n][n];// создается новый двумерный массив dp размером n на n, который будет использоваться для сохранения результатов вычислений.
        dp[0][0] = matrix[0][0];//инициализируется первый элемент массива dp значением первого элемента матрицы.

        for (int i = 1; i < n; i++) {//Цикл используется для вычисления значений первого столбца и первой строки массива dp
            dp[i][0] = dp[i - 1][0] + matrix[i][0];//вычисляется значение эл массива dp по формуле: значение предыдущего элемента в столбце плюс значение текущего элемента матрицы.
            dp[0][i] = dp[0][i - 1] + matrix[0][i];// вычисляется значение эл массива dp по формуле: значение предыдущего элемента в строке плюс значение текущего элемента матрицы.
        }

        for (int i = 1; i < n; i++) {// итерации от 1 до n-1 (исключая 0) по строкам матрицы.
            for (int j = 1; j < n; j++) {//  вложенный цикл,= итерации от 1 до n-1 (исключая 0) по столбцам матрицы
                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j];//вычисляется значение эл массива dp по формуле: выбирается минимум из значения элемента выше (dp[i - 1][j]) и значения элемента слева (dp[i][j - 1]), и к этому минимуму добавляется значение текущего элемента матрицы.
            }
        }

        return dp[n - 1][n - 1];//возвращается значение последнего элемента массива dp, которое представляет кратчайший путь в матрице.
    }

    // Задание 9: Построение строки на основе числового порядка слов
    public static String numericOrder(String str) {
        String[] words = str.split(" ");// разделяем исходную строку str на отдельные слова и сохраняем их в массив words по пробелу.
        String[] result = new String[words.length];//новый массив result с размером, равным количеству слов в исходной строке words.
        for (String word : words) {// for для каждого слова в масиве words.
            int index = Integer.parseInt(word.replaceAll("[^\\d]", "")) - 1;// слово в число, удаляя все символы, кроме цифр,
            result[index] = word.replaceAll("\\d", "");//присваем эл массива result  слово по индексу, удаляем все цифры
        }
        return String.join(" ", result);
    }

    // Задание 10: Замена элементов второго числа элементами первого числа
    public static int switchNums(int num1, int num2) {
        int[] count1 = countDigits(num1);//Создаем массив count1 для подсчета и хранения количества цифр в num1
        int[] count2 = countDigits(num2);//Создаем массив count2 для подсчета и хранения количества цифр в num2
        int[] sortedDigits = new int[10];//Создаем массив sortedDigits для сортировки цифр по порядку
        int resultNumIndex = 0;//Индекс для хранения текущей позиции в массиве sortedDigits

        int resultNum = 0;// Переменная для хранения итогового числа
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < count1[i]; j++) {
                sortedDigits[resultNumIndex] = i;//Заполняем массив sortedDigits цифрой i (i - текущая цифра)
                resultNumIndex++;//Увеличиваем индекс для следующей позиции
                resultNum = resultNum * 10 + i;//Формируем итоговое число, добавляя текущую цифру в конец
            }
        }

        int switchCount = 0;//Переменная для подсчета количества замен
        int multiplier = 1;//Множитель для формирования числа при замене цифр
        for (int i = 0; i < 10; i++) {
            int digit = sortedDigits[i];//Берем следующую цифру из отсортированного массива sortedDigits
            while (count2[digit] > 0) {
                count2[digit]--;//Уменьшаем счетчик цифры digit в массиве count2
                switchCount++;// Увеличиваем счетчик замен
                resultNum += digit * multiplier;//Заменяем текущую цифру в итоговом числе на digit
                multiplier *= 10;//Увеличиваем множитель для следующей позиции при замене цифр
            }
        }

        return switchCount == 0 ? -1 : resultNum;//Если не было замен, возвращаем -1, иначе итоговое число
    }

    private static int[] countDigits(int num) {
        int[] count = new int[10];//Создаем массив count для подсчета количества цифр в числе
        while (num > 0) {
            int digit = num % 10;//Берем последнюю цифру числа
            count[digit]++;//Увеличиваем счетчик соответствующей цифры
            num /= 10;// Удаляем последнюю цифру числа
        }
        return count;//Возвращаем массив с количеством цифр
    }

    public static void main(String[] args) {
        // Проверка заданий

        // Задание 1
        System.out.println(nonRepeatable("abracadabra")); // " abrcd"
        System.out.println(nonRepeatable("paparazzi")); // " parzi"
        System.out.println();

        // Задание 2
        System.out.println(generateBrackets(1)); // ["()"]
        System.out.println(generateBrackets(2)); // ["(())", "()()"]
        System.out.println(generateBrackets(3)); // ["((()))", "(()())", "(())()", "()(())", "()()()"]
        System.out.println();

        // Задание 3
        System.out.println(binarySystem(3)); // ["010", "011", "101", "110", "111"]
        System.out.println(binarySystem(4)); // ["0101", "0110", "0111", "1010", "1011", "1101", "1110", "1111"]
        System.out.println();

        // Задание 4
        System.out.println(alphabeticRow("abcdjuwx")); // "abcd"
        System.out.println(alphabeticRow("klmabzyxw")); // "zyxw"
        System.out.println();

        // Задание 5
        System.out.println(replaceCharsWithCount("aaabbcdd")); // "c1b2d2a3"
        System.out.println(replaceCharsWithCount("vvvvaajaaaaa")); // "j1a2v4a5"
        System.out.println();

        // Задание 6
        System.out.println(convertToNum("eight")); // 8
        System.out.println(convertToNum("five hundred sixty seven")); // 567
        System.out.println(convertToNum("thirty one")); // 31
        System.out.println();

        // Задание 7
        System.out.println(uniqueSubstring("123412324")); // "1234"
        System.out.println(uniqueSubstring("111111")); // "1"
        System.out.println(uniqueSubstring("77897898")); // "789"
        System.out.println();

        // Задание 8
        int[][] matrix1 = {
                {1, 3, 1},
                {1, 5, 1},
                {4, 2, 1}
        };
        System.out.println(shortestWay(matrix1)); // 7

        int[][] matrix2 = {
                {2, 7, 3},
                {1, 4, 8},
                {4, 5, 9}
        };
        System.out.println(shortestWay(matrix2)); // 21
        System.out.println();

        // Задание 9
        System.out.println(numericOrder("t3o the5m 1One all6 r4ule ri2ng")); // " One ring to rule them all"
        System.out.println(numericOrder("re6sponsibility Wit1h gr5eat power3 4comes g2reat")); // " With great power comes great responsibility"
        System.out.println();

        // Задание 10
        System.out.println(switchNums(519, 723)); // 953
        System.out.println(switchNums(491, 3912)); // 9942
        System.out.println(switchNums(6274, 71259)); // 77659
    }
}
