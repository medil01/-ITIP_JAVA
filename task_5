import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

public class Task5 {
    public Task5() {
    }

    public static void Main(String[] var0) {
        String var1 = "ABCA";
        String var2 = "DEFD";
        boolean var3 = sameLetterPattern(var1, var2);
        System.out.println("Same Letter Pattern: " + var3);
        String var4 = "H3";
        String var5 = "E2";
        String var6 = spiderVsFly(var4, var5);
        System.out.println("Spider vs Fly Path: " + var6);
        long var7 = 4321L;
        int var9 = digitsCount(var7);
        System.out.println("Number of Digits: " + var9);
        String[] var10 = new String[]{"DOG", "CAT", "BUG"};
        String var11 = "GOD";
        int var12 = totalPoints(var10, var11);
        System.out.println("Total Points: " + var12);
        int[] var13 = new int[]{1, 2, 3, 4, 5, 6, 7, 8};
        List var14 = sumsUp(var13);
        System.out.println("Sum Pairs: " + String.valueOf(var14));
        String[] var15 = new String[]{"95%", "83%", "90%", "87%", "88%", "93%"};
        System.out.println(takeDownAverage(var15));
        String[] var16 = new String[]{"10%"};
        System.out.println(takeDownAverage(var16));
        String[] var17 = new String[]{"53%", "79%"};
        System.out.println(takeDownAverage(var17));
        System.out.println(caesarCipher("encode", "hello world", 3));
        System.out.println(caesarCipher("decode", "almost last task!", 4));
        System.out.println(setSetup(5, 3));
        System.out.println(setSetup(7, 3));
        System.out.println(timeDifference("Los Angeles", "April 1, 2011 23:23", "Canberra"));
        System.out.println(timeDifference("London", "July 31, 1983 23:01", "Rome"));
        System.out.println(timeDifference("New York", "December 31, 1970 13:40", "Beijing"));
        System.out.println(isNew(3));
        System.out.println(isNew(30));
        System.out.println(isNew(321));
        System.out.println(isNew(123));
    }

    public static boolean sameLetterPattern(String var0, String var1) {
        if (var0.length() != var1.length()) {
            return false;
        } else {
            HashMap var2 = new HashMap();
            HashMap var3 = new HashMap();

            for(int var4 = 0; var4 < var0.length(); ++var4) {
                char var5 = var0.charAt(var4);
                char var6 = var1.charAt(var4);
                if (var2.containsKey(var5)) {
                    if ((Character)var2.get(var5) != var6) {
                        return false;
                    }
                } else {
                    var2.put(var5, var6);
                }

                if (var3.containsKey(var6)) {
                    if ((Character)var3.get(var6) != var5) {
                        return false;
                    }
                } else {
                    var3.put(var6, var5);
                }
            }

            return true;
        }
    }

    public static String spiderVsFly(String var0, String var1) {
        char var2 = var0.charAt(0);
        int var3 = Character.getNumericValue(var0.charAt(1));
        char var4 = var1.charAt(0);
        int var5 = Character.getNumericValue(var1.charAt(1));

        StringBuilder var6;
        for(var6 = new StringBuilder(); var2 != 'A' || var3 != 0; var6.append(var2).append(var3).append('-')) {
            if (var2 > 'A') {
                --var2;
            } else {
                --var3;
            }
        }

        for(; var5 > 0; var6.append(var4).append(var5).append('-')) {
            if (var4 > 'A') {
                --var4;
            } else {
                --var5;
            }
        }

        var6.append(var1);
        return var6.toString();
    }

    public static int digitsCount(long var0) {
        return var0 == 0L ? 1 : 1 + digitsCount(var0 / 10L);
    }

    public static int totalPoints(String[] var0, String var1) {
        int var2 = 0;
        HashMap var3 = new HashMap();
        char[] var4 = var1.toCharArray();
        int var5 = var4.length;

        int var6;
        for(var6 = 0; var6 < var5; ++var6) {
            char var7 = var4[var6];
            var3.put(var7, (Integer)var3.getOrDefault(var7, 0) + 1);
        }

        String[] var8 = var0;
        var5 = var0.length;

        for(var6 = 0; var6 < var5; ++var6) {
            String var9 = var8[var6];
            if (isValidWord(var9, var3)) {
                var2 += getScore(var9);
            }
        }

        return var2;
    }

    private static boolean isValidWord(String var0, Map<Character, Integer> var1) {
        HashMap var2 = new HashMap(var1);
        char[] var3 = var0.toCharArray();
        int var4 = var3.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            char var6 = var3[var5];
            if (!var2.containsKey(var6) || (Integer)var2.get(var6) == 0) {
                return false;
            }

            var2.put(var6, (Integer)var2.get(var6) - 1);
        }

        return true;
    }

    private static int getScore(String var0) {
        int var1 = var0.length();
        if (var1 == 3) {
            return 1;
        } else if (var1 == 4) {
            return 2;
        } else if (var1 == 5) {
            return 3;
        } else {
            return var1 == 6 ? 54 : 0;
        }
    }

    public static List<List<Integer>> sumsUp(int[] var0) {
        ArrayList var1 = new ArrayList();
        Arrays.sort(var0);
        int var2 = 0;
        int var3 = var0.length - 1;

        while(var2 < var3) {
            int var4 = var0[var2] + var0[var3];
            if (var4 == 8) {
                var1.add(Arrays.asList(var0[var2], var0[var3]));
                ++var2;
                --var3;
            } else if (var4 < 8) {
                ++var2;
            } else {
                --var3;
            }
        }

        return var1;
    }

    public static String takeDownAverage(String[] var0) {
        double var1 = 0.0;
        int var4 = var0.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            String var6 = var0[var5];
            var1 += Double.parseDouble(var6.substring(0, var6.length() - 1));
        }

        var1 /= (double)var0.length;
        double var10 = var1 - 5.0;
        double var11 = var10 * (double)(var0.length + 1);
        double var7 = var11 - Arrays.stream(var0).mapToDouble((var0x) -> Double.parseDouble(var0x.substring(0, var0x.length() - 1))).sum();
        int var9 = (int)Math.round(var7 / (double)(var0.length + 1) * 100.0);
        return "" + var9 + "%";
    }

    public static String caesarCipher(String var0, String var1, int var2) {
        StringBuilder var3 = new StringBuilder();
        char[] var4 = var1.toCharArray();
        int var5 = var4.length;

        for (char var7 : var4) {
            if (Character.isLetter(var7)) {
                int var8 = Character.isUpperCase(var7) ? 65 : 97;
                int var9 = (var7 - var8 + (var0.equals("decode") ? 26 - var2 : var2)) % 26;
                var3.append((char) (var8 + var9));
            } else {
                var3.append(var7);
            }
        }

        return var3.toString();
    }

    public static int setSetup(int var0, int var1) {
        return var1 == 0 ? 1 : setSetup(var0, var1 - 1) * (var0 - var1 + 1);
    }

    public static String timeDifference(String var0, String var1, String var2) {
        SimpleDateFormat var3 = new SimpleDateFormat("MMMM d, yyyy HH:mm");
        SimpleDateFormat var4 = new SimpleDateFormat("yyyy-M-d HH:mm");
        var3.setTimeZone(TimeZone.getTimeZone(getTimeZone(var0)));
        var4.setTimeZone(TimeZone.getTimeZone(getTimeZone(var2)));

        try {
            Date var5 = var3.parse(var1);
            return var4.format(var5);
        } catch (Exception var6) {
            var6.printStackTrace();
            return "";
        }
    }

    private static String getTimeZone(String var0) {
        return switch (var0) {
            case "Los Angeles" -> "America/Los_Angeles";
            case "New York" -> "America/New_York";
            case "Caracas" -> "America/Caracas";
            case "Buenos Aires" -> "America/Argentina/Buenos_Aires";
            case "London" -> "Europe/London";
            case "Rome" -> "Europe/Rome";
            case "Moscow" -> "Europe/Moscow";
            case "Tehran" -> "Asia/Tehran";
            case "New Delhi" -> "Asia/Kolkata";
            case "Beijing" -> "Asia/Shanghai";
            case "Canberra" -> "Australia/Sydney";
            default -> "";
        };
    }

    public static boolean isNew(int var0) {
        char[] var1 = Integer.toString(var0).toCharArray();
        Arrays.sort(var1);

        for(int var2 = 1; var2 < var1.length; ++var2) {
            if (var1[var2 - 1] == var1[var2]) {
                return false;
            }
        }

        return true;
    }
}

